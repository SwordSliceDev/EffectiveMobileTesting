import json
import os

class Library:
    def __init__(self, filename='books.json'):
        """
        Создание объекта и загрузка списка книг из заданного файла.
        """
        self.filename = filename
        self.books = self.load_books()

    def load_books(self):
        """
        Чтение json файла с книгами и запись их в список словарей.
        """
        if os.path.exists(self.filename):
            with open(self.filename, 'r') as file:
                return json.load(file)
        return []

    def save_books(self):
        """
        Запись списка книг в json файл.
        """
        with open(self.filename, 'w') as file:
            json.dump(self.books, file, indent=4)

    def add_book(self, title: str, author: str, year: int):
        """
        Добавление новой книги в библиотеку.
        """
        book_id = len(self.books) + 1 #генерация id новой книги
        new_book = {
            'id': book_id,
            'title': title.capitalize(),
            'author': author.title(),
            'year': year,
            'status': 'В наличии'
        }
        self.books.append(new_book)
        self.save_books()
        print(f'Книга {title.capitalize()} добавлена в библиотеку с ID {book_id}.')

    def delete_book(self, book_id: int):
        """
        Удаление книги по указанному ID из бибиотеки.
        """
        for book in self.books:
            if book['id'] == book_id:
                self.books.remove(book)
                self.save_books()
                print(f'Книга с ID {book_id} удалена из библиотеки.')
                return
        print(f'Книга с ID {book_id} не найдена в библиотеке.')

    def search_book(self, query: str):
        """
        Поиск книги по указанному пользователем параметру.
        """
        result = [book for book in self.books if query.capitalize() in book['title'] or
                  query.title() in book['author'] or
                  query == book['year']]
        if result:
            for book in result:
                self.display_one_book(book)
        else:
            print('К сожалению, по вашему запросу книг не найдено.')

    def display_one_book(self, book: dict):
        """
        Отображение одной книги из библиотеки.
        """
        print(f"ID: {book['id']}, Название: {book['title']}, Автор: {book['author']}, "
                f"Год: {book['year']}, Статус: {book['status']}")

    def display_books(self):
        """
        Отображение всех книг библиотеки.
        """
        if self.books:
            for book in self.books:
                self.display_one_book(book)
        else:
            print('Библиотека пуста.')

    def set_status(self, book_id: int, new_status: str):
        """
        Изменение статуса у книги по указанному пользователем ID.
        """
        if new_status.lower() not in ['в наличии', 'выдана']:
            print("Статус у книги может быть только 'В наличии' или 'Выдана'.")
        for book in self.books:
            if book['id'] == book_id:
                book['status'] = new_status
                self.save_books()
                print(f'Статус книги с ID {book_id} изменен на "{new_status.capitalize()}"')
                return
        print(f'В библиотеке отсутствует книга с ID {book_id}')


def main():
    library = Library()
    """
    Реализация меню для консольного приложения управления бибиотекой.
    """
    while True:
        print("\n--- Управление библиотекой книг ---")
        print("1. Добавить книгу")
        print("2. Удалить книгу")
        print("3. Поиск книги")
        print("4. Отобразить все книги")
        print("5. Изменить статус книги")
        print("6. Выход")
        action = input("Выберите опцию: ")

        if action == '1':
            title = input("Введите название книги: ") #Обработку пустого поля можно реализовать через 'while not title:'
            author = input("Введите автора книги: ")
            year = input("Введите год издания книги: ")
            library.add_book(title, author, year)
        elif action == '2':
            book_id = int(input("Введите ID книги для удаления: "))
            library.delete_book(book_id)
        elif action == '3':
            query = input("Введите название, автора или год для поиска книги: ")
            library.search_book(query)
        elif action == '4':
            library.display_books()
        elif action == '5':
            book_id = int(input("Введите ID книги для изменения статуса: "))
            new_status = input("Введите новый статус ('в наличии' или 'выдана'): ")
            library.set_status(book_id, new_status)
        elif action == '6':
            print("Выход из программы.")
            break
        else:
            print("Такого действия не существует. Пожалуйста, попробуйте снова.")


if __name__ == "__main__":
    main()
